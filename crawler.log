2016-04-09 14:12:46,414 [Thread-0] INFO  UserCrawler - UserCrawler constructor.{}
2016-04-09 14:12:46,567 [Thread-0] DEBUG org.apache.ibatis.logging.LogFactory - Logging initialized using 'class org.apache.ibatis.logging.log4j2.Log4j2Impl' adapter.{}
2016-04-09 14:12:46,869 [Thread-0] DEBUG org.apache.ibatis.logging.LogFactory - Logging initialized using 'class org.apache.ibatis.logging.log4j2.Log4j2Impl' adapter.{}
2016-04-09 14:12:46,939 [Thread-0] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.{}
2016-04-09 14:12:46,939 [Thread-0] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.{}
2016-04-09 14:12:46,939 [Thread-0] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.{}
2016-04-09 14:12:46,939 [Thread-0] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.{}
2016-04-09 14:12:47,206 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Opening JDBC Connection{}
2016-04-09 14:12:48,316 [Thread-0] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - Created connection 1904471886.{}
2016-04-09 14:12:48,317 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@7183ef4e]{}
2016-04-09 14:12:48,322 [Thread-0] DEBUG User.getMaxUserId - ==>  Preparing: SELECT max(id) FROM user {}
2016-04-09 14:12:48,394 [Thread-0] DEBUG User.getMaxUserId - ==> Parameters: {}
2016-04-09 14:12:48,453 [Thread-0] TRACE User.getMaxUserId - <==    Columns: max(id){}
2016-04-09 14:12:48,454 [Thread-0] TRACE User.getMaxUserId - <==        Row: 492{}
2016-04-09 14:12:48,460 [Thread-0] DEBUG User.getMaxUserId - <==      Total: 1{}
2016-04-09 14:12:48,461 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@7183ef4e]{}
2016-04-09 14:12:48,463 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@7183ef4e]{}
2016-04-09 14:12:48,464 [Thread-0] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - Returned connection 1904471886 to pool.{}
2016-04-09 14:12:48,464 [Thread-0] INFO  UserCrawler - UserCrawler has initialized{}
2016-04-09 14:12:48,464 [Thread-0] INFO  UserCrawler - 0 crawled,since variable: 492{}
2016-04-09 14:13:11,570 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Opening JDBC Connection{}
2016-04-09 14:13:11,570 [Thread-0] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - Checked out connection 1904471886 from pool.{}
2016-04-09 14:13:11,570 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@7183ef4e]{}
2016-04-09 14:13:11,572 [Thread-0] DEBUG User.insertList - ==>  Preparing: INSERT INTO user (login, id, type, site_admin, name, company, location, email, public_repos, public_gists, followers, following, created_at, updated_at{}
2016-04-09 14:13:11,603 [Thread-0] DEBUG User.insertList - ==> Parameters: Zelnox(String), 493(Integer), User(String), 0(Integer), null, null, null, null, 13(Integer), 14(Integer), 16(Integer), 6(Integer), 1203496066(Integer), 1459343201(Integer), saimonmoore(String), 494(Integer), User(String), 0(Integer), Saimon Moore(String), http://redbooth.com(String), Barcelona, Spain(String), saimonmoore@gmail.com(String), 97(Integer), 117(Integer), 52(Integer), 43(Integer), 1203496231(Integer), 1458181263(Integer), spencer(String), 495(Integer), User(String), 0(Integer), null, null, null, null, 7(Integer), 2(Integer), 3(Integer), 1(Integer), 1203496624(Integer), 1459299384(Integer), santry(String), 496(Integer), User(String), 0(Integer), Sean Santry(String), null, Boston, MA(String), sean@seansantry.com(String), 32(Integer), 0(Integer), 6(Integer), 0(Integer), 1203497050(Integer), 1456730501(Integer), urubatan(String), 497(Integer), User(String), 0(Integer), Rodrigo Urubatan Ferreira Jardim(String), null, Brazil(String), rodrigo@urubatan.com.br(String), 32(Integer), 6(Integer), 106(Integer), 3(Integer), 1203497070(Integer), 1457410749(Integer), kjf(String), 498(Integer), User(String), 0(Integer), Kevin Fagan(String), null, Dublin, Ireland(String), null, 21(Integer), 1(Integer), 14(Integer), 15(Integer), 1203497202(Integer), 1458650551(Integer), judofyr(String), 499(Integer), User(String), 0(Integer), Magnus Holm(String), Nordaaker(String), Oslo, Norway(String), judofyr@gmail.com(String), 136(Integer), 84(Integer), 262(Integer), 53(Integer), 1203497303(Integer), 1458185842(Integer), JJ(String), 500(Integer), User(String), 0(Integer), Juan Julián Merelo Guervós(String), Oficina de Software Libre, UGR(String), Granada, Spain, Europe(String), jjmerelo@gmail.com(String), 266(Integer), 19(Integer), 302(Integer), 39(Integer), 1203497337(Integer), 1458649319(Integer), tfwright(String), 501(Integer), User(String), 0(Integer), T. Floyd Wright(String), Site5(String), Green Bay, WI(String), tfwright@gmail.com(String), 36(Integer), 10(Integer), 17(Integer), 8(Integer), 1203497352(Integer), 1459604985(Integer), scoop(String), 502(Integer), User(String), 0(Integer), Patrick Lenz(String), limited overload GmbH(String), Wiesbaden, Germany(String), null, 18(Integer), 7(Integer), 32(Integer), 3(Integer), 1203497426(Integer), 1457515815(Integer), rob(String), 503(Integer), User(String), 0(Integer), Rob Gabaree(String), null, Connecticut(String), rob@rawb.net(String), 0(Integer), 1(Integer), 8(Integer), 1(Integer), 1203497432(Integer), 1459925685(Integer), mkhl(String), 505(Integer), User(String), 0(Integer), Martin Kühl(String), innoQ Deutschland GmbH(String), Germany(String), null, 73(Integer), 72(Integer), 97(Integer), 124(Integer), 1203497507(Integer), 1459519721(Integer), nmerouze(String), 506(Integer), User(String), 0(Integer), Nicolas Mérouze(String), UX Engineering Consultant(String), Osaka, Japan(String), null, 20(Integer), 43(Integer), 114(Integer), 3(Integer), 1203497596(Integer), 1456786130(Integer), franc(String), 507(Integer), User(String), 0(Integer), Francois Paul(String), null, Stellenbosch(String), null, 32(Integer), 9(Integer), 10(Integer), 9(Integer), 1203497691(Integer), 1456497271(Integer), sphire(String), 508(Integer), User(String), 0(Integer), Philipp Kruse(String), HMI Logic(String), Bamberg, Germany(String), null, 5(Integer), 0(Integer), 4(Integer), 2(Integer), 1203497763(Integer), 1456497271(Integer), dbr(String), 509(Integer), User(String), 0(Integer), dbr/Ben(String), null, Adelaide, Australia(String), null, 41(Integer), 67(Integer), 98(Integer), 39(Integer), 1203497805(Integer), 1456497271(Integer), pd(String), 510(Integer), User(String), 0(Integer), Kyle Hargraves(String), null, Chicago, IL, USA(String), pd@krh.me(String), 35(Integer), 27(Integer), 40(Integer), 10(Integer), 1203497814(Integer), 1458979640(Integer), kieranj(String), 511(Integer), User(String), 0(Integer), Kieran Johnson(String), Invisiblelines(String), Norwich, Norfolk, UK(String), null, 25(Integer), 5(Integer), 7(Integer), 1(Integer), 1203497871(Integer), 1458708620(Integer), japj(String), 512(Integer), User(String), 0(Integer), Jeroen Janssen(String), null, Netherlands(String), null, 30(Integer), 10(Integer), 53(Integer), 109(Integer), 1203498227(Integer), 1458177868(Integer), atharh(String), 513(Integer), User(String), 0(Integer), Athar Hameed(String), null, Islamabad, Pakistan(String), atharh@gmail.com(String), 18(Integer), 5(Integer), 24(Integer), 12(Integer), 1203498386(Integer), 1459564647(Integer), speck(String), 514(Integer), User(String), 0(Integer), Jason Speck(String), Roadtrippers(String), SW OH(String), github@jasonspeck.com(String), 4(Integer), 2(Integer), 11(Integer), 8(Integer), 1203498412(Integer), 1457750691(Integer), leemhenson(String), 515(Integer), User(String), 0(Integer), Lee Henson(String), Music Glue(String), London(String), lee.m.henson@gmail.com(String), 82(Integer), 8(Integer), 42(Integer), 41(Integer), 1203498757(Integer), 1459388509(Integer), donpinkster(String), 516(Integer), User(String), 0(Integer), Don Pinkster(String), Nerds & Company(String), Netherlands(String), null, 4(Integer), 22(Integer), 9(Integer), 2(Integer), 1203498981(Integer), 1460031035(Integer), rwj-promed(String), 517(Integer), User(String), 0(Integer), Robert Jackson(String), ProMedical, Inc.(String), Ocala, FL(String), null, 0(Integer), 0(Integer), 3(Integer), 0(Integer), 1203499245(Integer), 1449474997(Integer), pontus(String), 518(Integer), User(String), 0(Integer), Pontus Frehult(String), null, Uppsala, Sweden(String), pontus_github@soua.net(String), 43(Integer), 2(Integer), 5(Integer), 2(Integer), 1203499262(Integer), 1458307603(Integer), shinzui(String), 519(Integer), User(String), 0(Integer), Nadeem Bitar(String), null, Los Angeles / San Francisco(String), nadeem.bitar@icloud.com(String), 83(Integer), 148(Integer), 15(Integer), 27(Integer), 1203499272(Integer), 1459494123(Integer), mehdi(String), 520(Integer), User(String), 0(Integer), null, null, null, null, 0(Integer), 0(Integer), 3(Integer), 2(Integer), 1203499344(Integer), 1459829258(Integer), mansfiem(String), 521(Integer), User(String), 0(Integer), Matthew Mansfield(String), null, San Francisco(String), null, 7(Integer), 1(Integer), 5(Integer), 2(Integer), 1203501059(Integer), 1456497272(Integer), dbcm(String), 522(Integer), User(String), 0(Integer), Delfim Machado(String), null, Caxias, Portugal(String), dbcm@profundos.org(String), 4(Integer), 2(Integer), 28(Integer), 20(Integer), 1203501641(Integer), 1457995303(Integer), brett(String), 523(Integer), User(String), 0(Integer), Brett Eisenberg(String), null, San Francisco, CA, USA(String), brett@librum.org(String), 4(Integer), 2(Integer), 27(Integer), 177(Integer), 1203501893(Integer), 1459367347(Integer){}
2016-04-09 14:13:11,611 [Thread-0] DEBUG User.insertList - <==    Updates: 30{}
2016-04-09 14:13:11,615 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Committing JDBC Connection [com.mysql.jdbc.JDBC4Connection@7183ef4e]{}
2016-04-09 14:13:11,622 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@7183ef4e]{}
2016-04-09 14:13:11,622 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@7183ef4e]{}
2016-04-09 14:13:11,623 [Thread-0] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - Returned connection 1904471886 to pool.{}
2016-04-09 14:13:11,623 [Thread-0] INFO  UserCrawler - 30 crawled,since variable: 523{}
2016-04-09 14:13:31,448 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Opening JDBC Connection{}
2016-04-09 14:13:31,448 [Thread-0] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - Checked out connection 1904471886 from pool.{}
2016-04-09 14:13:31,448 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@7183ef4e]{}
2016-04-09 14:13:31,449 [Thread-0] DEBUG User.insertList - ==>  Preparing: INSERT INTO user (login, id, type, site_admin, name, company, location, email, public_repos, public_gists, followers, following, created_at, updated_at{}
2016-04-09 14:13:31,460 [Thread-0] DEBUG User.insertList - ==> Parameters: jredville(String), 524(Integer), User(String), 0(Integer), Jim Deville(String), Moz.com(String), Riverview, FL(String), james.deville@gmail.com(String), 63(Integer), 34(Integer), 23(Integer), 14(Integer), 1203501894(Integer), 1456497272(Integer), mwilliams(String), 525(Integer), User(String), 0(Integer), Matthew Williams(String), Sonian(String), New Paltz, NY(String), matthew.d.williams@gmail.com(String), 15(Integer), 33(Integer), 24(Integer), 29(Integer), 1203502283(Integer), 1458667502(Integer), jendrik(String), 526(Integer), User(String), 0(Integer), Jendrik Bertram(String), iFlicks(String), null, null, 1(Integer), 0(Integer), 4(Integer), 1(Integer), 1203502379(Integer), 1459460638(Integer), marmbrus(String), 527(Integer), User(String), 0(Integer), Michael Armbrust(String), UC Berkeley(String), Berkeley, CA(String), null, 20(Integer), 10(Integer), 131(Integer), 0(Integer), 1203502678(Integer), 1456497272(Integer), auser(String), 529(Integer), User(String), 0(Integer), Ari(String), FullStack.io(String), San Francisco, CA(String), me@ari.io(String), 249(Integer), 200(Integer), 604(Integer), 160(Integer), 1203503302(Integer), 1459216965(Integer), fauxparse(String), 530(Integer), User(String), 0(Integer), Matt Powell(String), null, Christchurch, New Zealand(String), fauxparse@gmail.com(String), 59(Integer), 31(Integer), 25(Integer), 5(Integer), 1203504070(Integer), 1458870347(Integer), n0ha(String), 531(Integer), User(String), 0(Integer), Viktor Lieskovsky(String), null, Bratislava(String), viktor.lieskovsky@gmail.com(String), 9(Integer), 2(Integer), 5(Integer), 7(Integer), 1203504286(Integer), 1459684554(Integer), hughbien(String), 532(Integer), User(String), 0(Integer), Hugh Bien(String), null, null, null, 23(Integer), 0(Integer), 10(Integer), 9(Integer), 1203504364(Integer), 1460034925(Integer), vishnugopal(String), 533(Integer), User(String), 0(Integer), Vishnu Gopal(String), http://vishnugopal.com/(String), Kochi, India(String), g.vishnu@gmail.com(String), 47(Integer), 23(Integer), 66(Integer), 6(Integer), 1203504834(Integer), 1459334700(Integer), ericallam(String), 534(Integer), User(String), 0(Integer), Eric Allam(String), null, London, UK(String), eallam@me.com(String), 102(Integer), 53(Integer), 150(Integer), 24(Integer), 1203507180(Integer), 1460085637(Integer), steveh(String), 535(Integer), User(String), 0(Integer), Steve Hoeksema(String), null, Wellington(String), github@kotiri.com(String), 96(Integer), 55(Integer), 29(Integer), 8(Integer), 1203508897(Integer), 1460152083(Integer), jpease(String), 536(Integer), User(String), 0(Integer), Justin Pease(String), VP, Services at Basho Technologies, Inc.(String), Boise, ID(String), justin.pease@gmail.com(String), 14(Integer), 4(Integer), 24(Integer), 4(Integer), 1203509487(Integer), 1459338653(Integer), skimua(String), 537(Integer), User(String), 0(Integer), null, null, null, null, 2(Integer), 13(Integer), 3(Integer), 15(Integer), 1203509886(Integer), 1459249949(Integer), codafoo(String), 538(Integer), User(String), 0(Integer), Codafoo(String), WebZense LLC(String), Irvine, CA(String), codafoo@gmail.com(String), 10(Integer), 0(Integer), 8(Integer), 7(Integer), 1203510184(Integer), 1458741786(Integer), fusedevice(String), 539(Integer), User(String), 0(Integer), Uros Zekar(String), null, Slovenia(String), uros@fusedevice.com(String), 1(Integer), 0(Integer), 5(Integer), 0(Integer), 1203512035(Integer), 1444712466(Integer), NaPs(String), 540(Integer), User(String), 0(Integer), Antoine Millet(String), Smartjog(String), Paris, FR.(String), antoine@inaps.org(String), 12(Integer), 21(Integer), 22(Integer), 20(Integer), 1203514441(Integer), 1460091838(Integer), mhallendal(String), 541(Integer), User(String), 0(Integer), Mikael Hallendal(String), Spotify AB(String), Stockholm, Sweden(String), null, 30(Integer), 12(Integer), 54(Integer), 6(Integer), 1203514679(Integer), 1459822348(Integer), aroth(String), 542(Integer), User(String), 0(Integer), Adam Roth(String), null, Connecticut(String), adamjroth@gmail.com(String), 32(Integer), 1(Integer), 11(Integer), 12(Integer), 1203519552(Integer), 1459302574(Integer), ahammock(String), 543(Integer), User(String), 0(Integer), Allen Hammock(String), Brainvat(String), Saint Louis, MO(String), ahammock@mac.com(String), 0(Integer), 0(Integer), 4(Integer), 3(Integer), 1203520500(Integer), 1429461618(Integer), chrisbailey(String), 544(Integer), User(String), 0(Integer), null, null, null, null, 0(Integer), 0(Integer), 2(Integer), 0(Integer), 1203524215(Integer), 1428579523(Integer), schelcj(String), 545(Integer), User(String), 0(Integer), Chris Scheller(String), null, null, schelcj@pobox.com(String), 25(Integer), 0(Integer), 8(Integer), 2(Integer), 1203525608(Integer), 1459762707(Integer), drudru(String), 546(Integer), User(String), 0(Integer), Dru Nelson(String), null, San Francisco, CA(String), null, 37(Integer), 4(Integer), 14(Integer), 1(Integer), 1203526806(Integer), 1456497272(Integer), etng(String), 547(Integer), User(String), 0(Integer), Yi Bo(String), CatpitalVue(String), China,SiChuan,Chengdu(String), etng2004@gmail.com(String), 78(Integer), 41(Integer), 34(Integer), 13(Integer), 1203531187(Integer), 1459110257(Integer), bct(String), 548(Integer), User(String), 0(Integer), Brendan Taylor(String), Inkdit(String), Edmonton, Canada(String), bct@diffeq.com(String), 30(Integer), 17(Integer), 26(Integer), 31(Integer), 1203537040(Integer), 1459862585(Integer), rmanalan(String), 549(Integer), User(String), 0(Integer), Rich Manalang(String), Atlassian(String), Oakland, CA(String), null, 80(Integer), 83(Integer), 39(Integer), 27(Integer), 1203537814(Integer), 1456497272(Integer), AndrewO(String), 550(Integer), User(String), 0(Integer), Andrew O'Brien(String), null, Annapolis, MD(String), obrien.andrew+github@gmail.com(String), 49(Integer), 27(Integer), 22(Integer), 7(Integer), 1203540468(Integer), 1456497272(Integer), njackson(String), 551(Integer), User(String), 0(Integer), Nate Jackson(String), CarbonFive(String), Los Angeles, CA(String), nate.d.jackson@gmail.com(String), 22(Integer), 1(Integer), 13(Integer), 0(Integer), 1203540616(Integer), 1453202878(Integer), Sutto(String), 553(Integer), User(String), 0(Integer), Darcy Laycock(String), Gyde(String), Melbourne, Australia(String), sutto+github@sutto.net(String), 102(Integer), 119(Integer), 283(Integer), 232(Integer), 1203542957(Integer), 1459734396(Integer), roop(String), 554(Integer), User(String), 0(Integer), Roopesh Chander(String), null, Bangalore, India(String), roop@roopc.net(String), 22(Integer), 8(Integer), 11(Integer), 0(Integer), 1203544059(Integer), 1459304467(Integer), ipvideomarketinfo(String), 555(Integer), Organization(String), 0(Integer), IPVM(String), null, null, null, 1(Integer), 0(Integer), 0(Integer), 0(Integer), 1203548121(Integer), 1458698642(Integer){}
2016-04-09 14:13:31,466 [Thread-0] DEBUG User.insertList - <==    Updates: 30{}
2016-04-09 14:13:31,466 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Committing JDBC Connection [com.mysql.jdbc.JDBC4Connection@7183ef4e]{}
2016-04-09 14:13:31,469 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@7183ef4e]{}
2016-04-09 14:13:31,469 [Thread-0] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@7183ef4e]{}
2016-04-09 14:13:31,470 [Thread-0] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - Returned connection 1904471886 to pool.{}
2016-04-09 14:13:31,470 [Thread-0] INFO  UserCrawler - UserCrawl Finished, totally crawled :60{}
